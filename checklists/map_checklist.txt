***Constructors***
1. explicit map(const key_compare& comp = key_compare(), const allocator_type& alloc = allocator_type());
2. template <class InputIterator> map(InputIterator first, InputIterator last, const key_compare& comp = key_compare(), const allocator_type& alloc = allocator_type());
3. map(const map& x);

______________________________
***Destructor***
1. ~map();
______________________________
***Member Functions***
BUG 1. at !!! It is C+11
mapped_type& at(const key_type& k);const mapped_type& at (const key_type& k) const;
- 2. begin, end, rbegin, rend
- 3. void clear();
- 4. size_type count (const key_type& k) const;
- 5. bool empty() const;
- 6. equal_range
pair<const_iterator,const_iterator> equal_range(const key_type& k) const;
pair<iterator,iterator> equal_range(const key_type& k);
- 7. erase
void erase (iterator position);
size_type erase (const key_type& k);
void erase (iterator first, iterator last);
- 8. find
iterator find(const key_type& k);
const_iterator find(const key_type& k) const;
- 9. allocator_type get_allocator() const;
- 10. insert
pair<iterator,bool> insert (const value_type& val);
iterator insert(iterator position, const value_type& val);
template <class InputIterator> void insert(InputIterator first, InputIterator last);
- 11. key_compare key_comp() const;
- 12. lower_bond
iterator lower_bound (const key_type& k);
const_iterator lower_bound (const key_type& k) const;
- 13. size_type max_size() const;
- 14. mapped_type& operator[] (const key_type& k);
- 15. map& operator= (const map& x);
- 16. size_type size() const;
- 17. void swap (map& x);
- 18. upper_bound
iterator upper_bound (const key_type& k);
const_iterator upper_bound (const key_type& k) const;
- 19. value_compare value_comp() const;

***Non-member overloads***
1. std::relational operators (map)
(1)	template <class Key, class T, class Compare, class Alloc>
bool operator== ( const map<Key,T,Compare,Alloc>& lhs, const map<Key,T,Compare,Alloc>& rhs );
(2)	template <class Key, class T, class Compare, class Alloc>
bool operator!= ( const map<Key,T,Compare,Alloc>& lhs, const map<Key,T,Compare,Alloc>& rhs );
(3)	template <class Key, class T, class Compare, class Alloc>
bool operator<  ( const map<Key,T,Compare,Alloc>& lhs, const map<Key,T,Compare,Alloc>& rhs );
(4)	template <class Key, class T, class Compare, class Alloc>
bool operator<= ( const map<Key,T,Compare,Alloc>& lhs, const map<Key,T,Compare,Alloc>& rhs );
(5)	template <class Key, class T, class Compare, class Alloc>
bool operator>  ( const map<Key,T,Compare,Alloc>& lhs, const map<Key,T,Compare,Alloc>& rhs );
(6)	template <class Key, class T, class Compare, class Alloc>
bool operator>= ( const map<Key,T,Compare,Alloc>& lhs, const map<Key,T,Compare,Alloc>& rhs );

2. swap
template <class Key, class T, class Compare, class Alloc>
void swap (map<Key,T,Compare,Alloc>& x, map<Key,T,Compare,Alloc>& y);
